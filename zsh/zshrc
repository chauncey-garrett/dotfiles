# Executes commands at the start of an interactive session.
#
#

#
# Load a custom profile for the local machine and each domain or subdomain it
# belongs to. (e.g. com, example.com and www.example.com)
#

parts=(${(s:.:)"$(hostname)"})

for i in {${#parts}..1}; do

  # NOTE: Don't quote profile.
  profile=${(j:.:)${parts[$i,${#parts}]}}
  file="${ZSH_CUSTOM}/profiles/${profile}"

  # Load profile, if one exists.
  if [[ -s "${file}" ]]; then

    # shellcheck source=/dev/null
    source "${file}"
  fi
done

#
# Source Prezto
#

prezto="${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

if [[ -s "${prezto}" ]]; then

  # shellcheck source=/dev/null
  source "${prezto}"
else
  exit
fi

#
# Customize to your needs...
#

# Import "secret" stuff
source ~/.secrets/zsh/zshrc

#
# Time
#

function datetime() {
  date +'%Y-%m-%d %H:%M:%S.%3N'
}

#
# Timestamp
#

function timestamp() {
  echo "[$(datetime)]"
}

#
# Print an info message to the term
#   USAGE: info "Information."
#

function info() {
  # echo -e "\n\e[34m$(timestamp)\e[0m $0: $@ \n" >&2
  echo -e "\n$FG[blue]$(timestamp) $FX[bold]$FG[yellow]$0$FX[no-bold]$FG[blue]:$FG[none] $@ \n" >&2
}

#
# Print a warning message to the term
#   USAGE: warn "Warning."
#

function warn() {
  # echo -e "\n\e[31m$(timestamp)\e[0m $0: $@ \n" >&2
  echo -e "\n$FG[red]$(timestamp) $FX[bold]$FG[yellow]$0$FX[no-bold]$FG[red]:$FG[none] $@ \n" >&2
}

#
# Exit while specifying a return code and message
#   USAGE: die 127 "Syntax Error."
#

function die() {
  local exit_code

  exit_code="$1"

  shift
  warn "$@"
  exit "${exit_code}"
}

#
# Ctrl+Z
#

function fancy-ctrl-z() {

  # On an empty command line. Run bg (so that Ctrl+Z Ctrl+Z suspends a program
  # and immediately resumes it in the background).
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay

  # On a non-empty command line. Suspend the current command edition: let me
  # type another command, and when that second command line finished, I get back
  # the first command to edit.
  else
    zle push-line-or-edit
  fi
}

zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

#
# cd to directory of linked file
#

function cdln() {
  cd "$(dirname "$(readlink -f "$1")")" || exit
}

#
# Copy the current directory into the clipboard
#

function copydir() {
  if (( ! $+commands[pbcopy] )); then
    warn "pbcopy is not an available command."
    return
  fi

  pwd | tr -d "\r\n" | pbcopy
}

#
# Terminal-Velocity
#

function tv() {
  if (( ! $+commands[terminal_velocity] )); then
    warn "terminal_velocity is not an available command."
    return
  fi

  terminal_velocity
}

#
# Tmuxinator
#

tmuxinator="${HOME}/.tmuxinator/scripts/tmuxinator"
if [[ -s "$tmuxinator" ]]; then
  source "$tmuxinator"
fi

function mux() {
  tmuxinator "$@"
}

function start() {
  tmuxinator start "$@"
}

function stop() {
  tmuxinator stop "$@"
}

#
# HTOP
#

if (( $+commands[htop] )); then
  alias top='htop'
fi

#
# Homebrew
#

function brews() {
  if (( ! $+commands[brew] )); then
    warn "brew is not an available command."
    return
  fi

  brew list -1
}

#
# cd to the directory a symlink is pointing to or that directory containing the
# file the symlink is pointing to
#

function cdlink() {
  for file in "$@"; do
    cd "${file}(:A:h)" || warn "Can't cd to $file"
  done
}

#
# Be paranoid, new files are readable/writable by me only, but not as root
#

# if [[ ${UID} -ne 0 ]]; then
  # umask 077
# fi

#
# Colorize stderr in red
#

# exec 2>>(
# while read X
# do
  # print "\e[91m${X}\e[0m" > /dev/tty
# done &
# )

#
# List the current SHELL (instead of the SHELL you started in)
#

function shell() {
  if (( ! $+commands[awk] )); then
    warn "brew is not an available command."
    return
  fi

  ps | grep "$$" | awk '{ print $4 }'
}

#
# Access the online help
#

unalias run-help
autoload run-help
export HELPDIR="/usr/local/share/zsh/helpfiles"

#
# Always use the proper vim
#

# Use regular vim
alias vi='vim'

# Use MacVim as GUI, if available
if (( $+commands[mvim] )); then
  alias gvim='mvim'
fi

# Use Neovim if available
if (( $+commands[nvim] )); then
  function nvim() {
    ASDF_NODEJS_VERSION=system \
    ASDF_PYTHON_VERSION=system \
    ASDF_RUBY_VERSION=system \
    TERM=xterm-256color-italic \
      command nvim "$@"
  }
  alias vi='nvim'
  alias vim='nvim'
fi

#
# macOS Calendar
#

if (( $+commands[icalBuddy] )); then
	function ical() {
		icalBuddy \
			--formatOutput \
			--separateByDate \
			eventsToday+1
	}

	function reminders() {
		icalBuddy \
			--formatOutput \
			--separateByDate \
			-sc \
			uncompletedTasks
	}

	function week() {
		icalBuddy \
			--formatOutput \
			--separateByDate \
			eventsToday+7
	}

  if (( $+commands[wego] )); then
    function today() {
      wego -days 1 \
        && ical
    }
  fi
fi

#
# WiFi
#
# Usage:
#	wifi on
#	wifi off
#

function wifi() {
  if (( ! $+commands[networksetup] )); then
    warn "networksetup is not an available command."
    return
  fi

  networksetup -setairportpower en1 "$@"
}

#
# Deft
#

function nv() {
  if (( ! $+commands[emacs] )); then
    warn "emacs is not an available command."
    return
  fi

  emacs -f deft
}

#
# Ack
#

# Search with Ack, then open resulting files in vim
function ack2vim() {
  if (( ! $+commands[ack] )); then
    warn "ack is not an available command."
    return
  fi

  if (( ! $+commands[vim] )); then
    warn "vim is not an available command."
    return
  fi

  ack -li -- "$@" 2>/dev/null \
    | xargs -o "vim" -c "/$@"
}

#
# Internet troubleshooting
#

# Ping bing 100x.
function bing() {
  if (( ! $+commands[ping] )); then
    warn "ping is not an available command."
    return
  fi

  info "Pinging bing.com 100x"

  ping -c 100 "bing.com"
}

# Ping google 3x.
function poogle() {
  if (( ! $+commands[ping] )); then
    warn "ping is not an available command."
    return
  fi

  info "Pinging google.com 3x"

  ping -c 3 "google.com"
}

# Speedtest 500MB.
function speedtest() {
  if (( ! $+commands[wget] )); then
    warn "wget is not an available command."
    return
  fi

  wget --output-document="/dev/null" "http://speedtest.wdc01.softlayer.com/downloads/test500.zip"
}

# print out my IP address
function myip() {
  if (( ! $+commands[ifconfig] )); then
    warn "ifconfig is not an available command."
    return
  fi

  if (( ! $+commands[sed] )); then
    warn "sed is not an available command."
    return
  fi

  if (( ! $+commands[awk] )); then
    warn "awk is not an available command."
    return
  fi

  if (( ! $+commands[curl] )); then
    warn "curl is not an available command."
    return
  fi

  echo "public     : $(dig +short myip.opendns.com @resolver1.opendns.com)"
  echo "local      : $(ipconfig getifaddr en0)"

  # lo0
  ifconfig lo0 \
    | grep 'inet ' \
    | sed -e 's/:/ /' \
    | awk '{print "lo0        : " $2}'

  # en0 IPv4
  ifconfig en0 \
    | grep 'inet ' \
    | sed -e 's/:/ /' \
    | awk '{print "en0 (IPv4) : " $2 " " $3 " " $4 " " $5 " " $6}'

  # en0 IPv6
  ifconfig en0 \
    | grep 'inet6 ' \
    | sed -e 's/ / /' \
    | awk '{print "en0 (IPv6) : " $2 " " $3 " " $4 " " $5 " " $6}'

  # en1 IPv4
  ifconfig en1 \
    | grep 'inet ' \
    | sed -e 's/:/ /' \
    | awk '{print "en1 (IPv4) : " $2 " " $3 " " $4 " " $5 " " $6}'

  # en1 IPv6
  ifconfig en1 \
    | grep 'inet6 ' \
    | sed -e 's/ / /' \
    | awk '{print "en1 (IPv6) : " $2 " " $3 " " $4 " " $5 " " $6}'
}

#
# Xcode
#

function xcode() {
  local xcode

  xcode="/Developer/Applications/Xcode.app"

  if [[ -f "${xcode}" ]]; then
    warn "Xcode.app is not available installed."
    return
  fi

  open -a "${xcode}"
}

#
# Fuzzy Finder
#

if (( $+commands[fzf] )); then

  # Source config files
  if [[ -s "${HOME}/.fzf.zsh" ]]; then
    source "${HOME}/.fzf.zsh"
  fi

  if (( $+commands[fd] )); then
    export FZF_DEFAULT_COMMAND='command fd --type f'
  fi

  # fkill - kill processes - list only the ones you can kill. Modified the earlier script.
  # https://github.com/junegunn/fzf/wiki/Examples#processes
  function fkill() {
      local pid
      if [ "$UID" != "0" ]; then
          pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
      else
          pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
      fi

      if [ "x$pid" != "x" ]
      then
          echo $pid | xargs kill -${1:-9}
      fi
  }

  # Filter man pages
  function fman() {
    man -k . \
      | fzf -q "$1" --prompt='man> ' --preview $'echo {} | sed \'s/([^()]*)//g\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man | col -bx | bat -l man -p --color always' \
      | sed 's/([^()]*)//g' \
      | awk '{printf "%s ", $2} {print $1}' \
      | xargs -r man
  }
  # Get the colors in the opened man page itself
  export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"

  function _gen_fzf_default_opts() {
    if [[ $COLORTERM =~ ^(truecolor|24bit)$ ]]; then
      local base03="#002b36"
      local base02="#073642"
      local base01="#586e75"
      local base00="#657b83"
      local base0="#839496"
      local base1="#93a1a1"
      local base2="#eee8d5"
      local base3="#fdf6e3"
      local yellow="#b58900"
      local orange="#cb4b16"
      local red="#dc322f"
      local magenta="#d33682"
      local violet="#6c71c4"
      local blue="#268bd2"
      local cyan="#2aa198"
      local green="#859900"
    else
      local base03="234"
      local base02="235"
      local base01="240"
      local base00="241"
      local base0="244"
      local base1="245"
      local base2="254"
      local base3="230"
      local yellow="136"
      local orange="166"
      local red="160"
      local magenta="125"
      local violet="61"
      local blue="33"
      local cyan="37"
      local green="64"
    fi

    # Comment and uncomment below for the light theme.

    # Solarized Dark color scheme for fzf
    export FZF_DEFAULT_OPTS="
      --color fg:-1,bg:-1,hl:$blue,fg+:$base2,bg+:$base02,hl+:$blue
      --color info:$yellow,prompt:$yellow,pointer:$base3,marker:$base3,spinner:$yellow
    "
    ## Solarized Light color scheme for fzf
    #export FZF_DEFAULT_OPTS="
    #  --color fg:-1,bg:-1,hl:$blue,fg+:$base02,bg+:$base2,hl+:$blue
    #  --color info:$yellow,prompt:$yellow,pointer:$base03,marker:$base03,spinner:$yellow
    #"
  }
  _gen_fzf_default_opts

  # ftpane - switch pane (@george-b)
  # https://github.com/junegunn/fzf/wiki/Examples-(tmux)
  # https://github.com/junegunn/fzf/wiki/Examples#tmux
  #
  # In tmux.conf:
  # bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"
  function ftpane() {
    local panes current_window current_pane target target_window target_pane
    panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
    current_pane=$(tmux display-message -p '#I:#P')
    current_window=$(tmux display-message -p '#I')

    target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

    target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
    target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

    if [[ $current_window -eq $target_window ]]; then
      tmux select-pane -t ${target_window}.${target_pane}
    else
      tmux select-pane -t ${target_window}.${target_pane} \
        && tmux select-window -t $target_window
    fi
  }

  # fasd & fzf change directory - jump using `fasd` if given argument, filter output of `fasd` using `fzf` else
  # https://github.com/junegunn/fzf/wiki/Examples#with-fasd-1
  function z() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
  }

  # Preview the content of the file under the cursor when using Alt-T
  # Using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
  export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"

  # Use tree command to preview directory when using Alt-C
  export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

  # Use ,, instead of ** b/c ** is normally zsh globbing
  export FZF_COMPLETION_TRIGGER=',,'
fi

#
# FORTRAN
#

function f95() {
  if (( ! $+commands[gfortran] )); then
    warn "gfortran is not an available command."
    return
  fi

  gfortran -std=f95
}

function f77() {
  if (( ! $+commands[gfortran] )); then
    warn "gfortran is not an available command."
    return
  fi

  gfortran -std=legacy
}

#
# Modules
#

myModules="/usr/local/opt/modules/Modules/init/zsh"

if [[ -s "${myModules}" ]]; then
  source "${myModules}"
fi

#
# dfc
#

function disk-usage() {
  if (( ! $+commands[dfc] )); then
    warn "dfc is not an available command."
    return
  fi

  dfc
}

#
# Tower
#

function tower() {
  if (( ! $+commands[gittower] )); then
    warn "gittower is not an available command."
    return
  fi

  if (( $@ )); then
    gittower "$@"
  else
    gittower .
  fi
}

#
# Marked 2
#

function mark() {
  local marked

  marked="/Applications/Setapp/Marked.app"

  if [[ -f "${marked}" ]]; then
    warn "Marked is not an available application."
    return
  fi

  if (( $@ )); then
    open -a "${marked}" "$@"
  else
    open -a "${marked}"
  fi
}

#
# Save last command to clipboard and nvALT
#

function pbcopy-last {
  local nvalt_root

  # Set nvALT notes folder.
  nvalt_root="${HOME}/Dropbox/Notes"

  if (( ! $+commands[pbcopy] )); then
    warn "pbcopy is not an available command."
    return
  fi

  if (( ! $+commands[pbpaste] )); then
    warn "pbpaste is not an available command."
    return
  fi

  if (( ! $+commands[awk] )); then
    warn "awk is not an available command."
    return
  fi

  mkdir -p "${nvalt_root}"

  # Copy the command to the clipboard.
  history -1 \
    | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' \
    | pbcopy

  # Make a new note for nvALT.
cat << EOF
Press "^C" to copy to the pasteboard
  OR
Type the title of the nvALT note you want to create, followed by [ENTER]:
EOF
  read -r nvalt_note

  pbpaste >> "${nvalt_root}"/"${nvalt_note}"
}

export HISTSIZE=100000
export SAVEHIST=100000

export HISTORY_IGNORE="(rm -rf|ls) *"
zshaddhistory() {
  emulate -L zsh
  [[ $1 != ${~HISTORY_IGNORE} ]]
}

#
# Print out line numbers
#

# Output a text file with line numbers
# http://brettterpstra.com/2015/11/24/shell-tricks-quick-line-numbering/
lno() {
  if (( ! $+commands[sed] )); then
    warn "sed is not an available command."
    return
  fi

  if (( $# == 0 )); then
    warn "No filename provided."
    return
  else
    sed = "$1" | paste -s -d '\t\n' - -
  fi
}

#
# Print out readable paths
#

cdpath() {
  echo "${CDPATH}" | tr : '\n'
}

path() {
  echo "${PATH}" | tr : '\n'
}

manpath() {
  echo "${MANPATH}" | tr : '\n'
}

infopath() {
  echo "${INFOPATH}" | tr : '\n'
}

mailpath() {
  echo "${MAILPATH}" | tr : '\n'
}

xdg_data_dirs() {
  echo "${XDG_DATA_DIRS}" | tr : '\n'
}

gopath() {
  echo "${GOPATH}" | tr : '\n'
}

#
# Gulp
#

# Autocompletion
if (( $+commands[gulp] )); then
  eval "$(gulp --completion=zsh)"
fi

#
# iTerm
#

# Shell integration
if [[ -e "${HOME}/.iterm2_shell_integration.zsh" ]]; then
  source "${HOME}/.iterm2_shell_integration.zsh"
fi

#
# ASSH
#

if (( $+commands[assh] )); then
  alias ssh="TERM=xterm-256color assh wrapper ssh --"
else
  alias ssh="TERM=xterm-256color ssh"
fi

#
# TODO
#

function todo() {
  ag "TODO"
  ag "FIXME"
}

#
# RipGrep
#

alias rg="rg --colors 'path:fg:green' --colors 'path:style:intense' --colors 'line:style:intense' --colors 'line:fg:green' --colors 'line:style:intense' --colors 'match:fg:magenta' --colors 'match:style:nobold' --smart-case"

#
# Siesta
#

function spec() {
   egrep 'test.describe|test.it' "${@}" \
     | sed -r "s/test.it\('|test.describe\('//g" \
     | sed -r "s/', function \(test\) \{//g"
}

#
# cdiff
#

export CDIFF_OPTIONS='-s -w0'

#
# git
#

alias ..g='git rev-parse && cd "$(git rev-parse --show-cdup)"'
alias git-url='git config --get remote.origin.url'

#
# aliases
#

function aliases() {
  alias | ag "${@}"
}

#
# Whicha
#

function whicha() {
  which -a "${@}"
}

#
# Finda
#

function finda() {
  find . | ag "${@}"
}

#
# Kaleidoscope
#

# Setup Kaleidoscope for tmux
if (( $+commands[ksdiff] )) && (( $+commands[reattach-to-user-namespace] )); then
  alias ksdiff='reattach-to-user-namespace -l ksdiff'
fi

#
# JFLint
#

function jflint() {
  find . -type f -iname *jenkinsfile* | entr jflint --csrf-disabled /_
}

function safari {
{
osascript <<EOD
tell application "Safari"
  make new document
  activate
end tell
EOD
} && open -a Safari "${@}"
}

function k() {
  kubectl "${@}"
}

#
# repeat
# Repeat the previous command until it returns success.
#
function repeat() {
  CMD=$(fc -ln | tail -2 | head -1)

  echo "repeating until success: $CMD"
  echo

  until $CMD; do
    sleep 1
  done
}

#
# ASDF
#

. /usr/local/opt/asdf/libexec/asdf.sh

#
# touch-with-dir
# `touch` a new file making missing directories
#
function touch-with-dir() {
  mkdir -p "$(dirname "$1")" \
    && touch "$1"
}

#
# Navi
#

if (( $+commands[navi] )); then
  eval "$(navi widget zsh)"
fi

#
# Source private config files
#

for file in ${HOME}/.dotfiles/zsh/private/**/*.rc; do
  source "${file}"
done

#
# gcloud
#

export USE_GKE_GCLOUD_AUTH_PLUGIN=True
source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
